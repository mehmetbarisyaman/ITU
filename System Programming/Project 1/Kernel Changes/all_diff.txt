--- Original/linux-source-3.13.0/kernel/exit.c	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/kernel/exit.c	2017-10-06 15:41:15.033238107 +0300
@@ -53,6 +53,7 @@
 #include <linux/oom.h>
 #include <linux/writeback.h>
 #include <linux/shm.h>
+#include <linux/sched.h> // Added
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
@@ -705,6 +706,20 @@
 {
 	struct task_struct *tsk = current;
 	int group_dead;
+	
+	// Change start
+	struct task_struct *child_task;
+	struct list_head *children_list;
+	
+	if(tsk->myFlag == 1 && task_nice(tsk) > 10){
+		list_for_each(children_list, &tsk->children) {
+			
+			// task now points to one of current's children
+            child_task = list_entry(children_list, struct task_struct, sibling);
+            sys_kill(child_task->pid, SIGKILL); 
+        }
+	}
+	// Change end
 
 	profile_task_exit(tsk);
 
--- Original/linux-source-3.13.0/include/linux/sched.h	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/include/linux/sched.h	2017-09-30 18:49:35.942815007 +0300
@@ -1465,6 +1465,7 @@
 	unsigned int	sequential_io;
 	unsigned int	sequential_io_avg;
 #endif
+	int myFlag;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
--- Original/linux-source-3.13.0/include/linux/init_task.h	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/include/linux/init_task.h	2017-09-30 19:00:04.547499306 +0300
@@ -161,6 +161,7 @@
  */
 #define INIT_TASK(tsk)	\
 {									\
+	.myFlag		= 0,						\
 	.state		= 0,						\
 	.stack		= &init_thread_info,				\
 	.usage		= ATOMIC_INIT(2),				\
--- Original/linux-source-3.13.0/kernel/fork.c	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/kernel/fork.c	2017-09-30 19:14:15.542989938 +0300
@@ -1556,6 +1556,8 @@
 	trace_task_newtask(p, clone_flags);
 	uprobe_copy_process(p, clone_flags);
 
+	p->myFlag = p->real_parent->myFlag;	//Goksel
+	
 	return p;
 
 bad_fork_free_pid:
--- Original/linux-source-3.13.0/Makefile	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/Makefile	2017-10-06 15:04:35.827236567 +0300
@@ -537,7 +537,7 @@
 drivers-y	:= drivers/ sound/ firmware/ ubuntu/
 net-y		:= net/
 libs-y		:= lib/
-core-y		:= usr/
+core-y		:= usr/ mycall/ myflag/
 endif # KBUILD_EXTMOD
 
 ifeq ($(dot-config),1)
--- Original/linux-source-3.13.0/arch/x86/syscalls/syscall_32.tbl	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/arch/x86/syscalls/syscall_32.tbl	2017-10-06 15:04:31.415048258 +0300
@@ -361,3 +361,5 @@
 352	i386	sched_getattr		sys_ni_syscall
 353	i386	renameat2		sys_ni_syscall
 354	i386	seccomp			sys_seccomp
+355	i386	mycall			sys_mycall
+356	i386	myflag		set_myFlag
--- Original/linux-source-3.13.0/include/linux/syscalls.h	2017-09-13 16:25:21.000000000 +0300
+++ linux-source-3.13.0/include/linux/syscalls.h	2017-10-06 15:04:42.683559013 +0300
@@ -849,4 +849,6 @@
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
 asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 			    const char __user *uargs);
+asmlinkage int sys_mycall(int i, int j);
+asmlinkage long set_myFlag(pid_t pid, int flag);
 #endif
